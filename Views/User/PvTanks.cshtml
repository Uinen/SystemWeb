<section id="adaptive">
    <div class="container">
        <div class="row">
            <div class="center-block">
                <style type="text/css">
                    ::-ms-clear {
                        display: none;
                    }

                    .e-gridAdaptive {
                        border-width: 0px !important;
                    }
                </style>
                @(Html.EJ().Grid<PvTank>("FlatGridTank")
                    .Locale("it-IT")
                    .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.dataSource)
                    .UpdateURL("update")
                    .InsertURL("insert")
                    .RemoveURL("remove")
                    .Adaptor(AdaptorType.RemoteSaveAdaptor))
                    .AllowGrouping()
                    .AllowPaging()
                    .EnableAltRow()
                    .PageSettings(p => p.PageCount(2).PageSize(10))
                    .IsResponsive(true)
                    .EnableResponsiveRow(false)
                    .AllowSorting()
                    .AllowFiltering()
                                    .FilterSettings(filter =>
                                    {
                                        filter.FilterType(FilterType.Excel);
                                    })

                    .AllowMultiSorting()
                    .ClientSideEvents(eve => eve.ActionComplete("ActionCompleteTank"))
                    .MinWidth(600)
                    .EditSettings(d => d.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.ExternalForm))
                    .ToolbarSettings(toolbar =>
                    {
                        toolbar.ShowToolbar().ToolbarItems(items =>
                        {
                            items.AddTool(ToolBarItems.Add);
                            items.AddTool(ToolBarItems.Edit);
                            items.AddTool(ToolBarItems.Delete);
                            items.AddTool(ToolBarItems.Update);
                            items.AddTool(ToolBarItems.Cancel);
                            items.AddTool(ToolBarItems.Search);
                            items.AddTool(ToolBarItems.ExcelExport);
                            items.AddTool(ToolBarItems.WordExport);
                            items.AddTool(ToolBarItems.PdfExport);
                        });
                    })

                    .Mappers(map => map.ExportToExcelAction("tanksexcell")
                                    .ExportToPdfAction("tankspdf")
                                    .ExportToWordAction("tanksword"))
                    .Columns(col =>
                    {
                        col.Field(p => p.PvTankId).HeaderText("ID Cisterna").IsPrimaryKey(true).Visible(false).Add();

                        col.Field(p => p.pvID).HeaderText("PV").ForeignKeyField("pvID").ForeignKeyValue("pvName")
                        .DataSource((IEnumerable<object>)ViewBag.datasource2).TextAlign(TextAlign.Left).Width(75).EditType(EditingType.Dropdown).Add();

                        col.Field(p => p.ProductId).HeaderText("Prodotto").ForeignKeyField("ProductId").ForeignKeyValue("Nome")
                        .DataSource((IEnumerable<object>)ViewBag.datasource3).TextAlign(TextAlign.Left).Width(75).EditType(EditingType.Dropdown).Add();

                        col.Field(p => p.Modello).HeaderText("Modello").Width("50").EditType(EditingType.String).Add();
                        col.Field(p => p.Capienza).HeaderText("Capienza").Width("45").EditType(EditingType.Numeric).Add();
                        col.Field(p => p.Giacenza).HeaderText("Giacenza").Width("50").EditType(EditingType.Numeric).Add();
                        col.Field(p => p.LastDate).HeaderText("Ultima Rilevazione").Format("{0:MM/dd/yyyy}").EditType(EditingType.Datepicker).Width("65").Add();
                        col.Field(p => p.Descrizione).HeaderText("Descrizione").Width("45").EditType(EditingType.String).Add();
                    })
                )
            </div>
        </div>
    </div>
</section>
@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/GridOption")
    <script type="text/javascript">
    ej.Grid.Locale["it-IT"] = {
        EmptyRecord: "Nessun record da visualizzare",
        GroupDropArea: "Trascinare una colonna qui",
        DeleteOperationAlert: "Nessuna voce selezionata per l'eliminazione",
        EditOperationAlert: "Entrate selezionate per operazione di modifica",
        SaveButton: "Salva",
        CancelButton: "Annulla",
        EditFormTitle: "Modifica",
        GroupCaptionFormat: "{{:field}}: {{:key}} - {{:count}} {{if count == 1}}Oggetto{{else}}Oggetti{{/if}}",
        UnGroup: "Clicca qui per separare"
    };
    ej.Pager.Locale["it-IT"] = {
        pagerInfo: "{0} di {1} Pagine ({2} Oggetti)",
        firstPageTooltip: "Per la prima pagina",
        lastPageTooltip: "L'ultima pagina",
        nextPageTooltip: "Pagina successiva",
        previousPageTooltip: "Pagina precedente",
        nextPagerTooltip: "Alla prossima pagina",
        previousPagerTooltip: "Pagina precedente"
    };
    </script>
}



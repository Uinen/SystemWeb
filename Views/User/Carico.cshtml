@{
    ViewBag.Title = "Ordini";
    Layout = "~/Views/Shared/_SecondLayout.cshtml";
}

<section id="features" class="block">
    @using (Html.BeginForm("Carico", "User", FormMethod.Get))
    {
        <div class="container">
            <div class="row">
                <div class="item">
                    <div class="header-content">
                        <h4 class="alert alert-info">Lista di tutti gli ordini registrati sul impianto</h4>
                        <strong>Genera</strong>
                        @Html.ActionLink("Diagramma", "CaricoChart")
                    </div>
                </div>
                <div class="item">
                    <div class="grid-filter">
                        <form id="date-range-form" action="@Url.Action("Carico", "User")" method="post">
                            <h5 class="alert alert-info">Compilando il campo sottostante con range in data avente formato <strong>MM/DD/YY</strong>, verrà calcolata la somma degli ordini registrati sul impianto in funzione del range selezionato.</h5>
                            <h5 class="alert alert-info">La Somma è riportata a fondo pagina nella sezione <strong>TOTALI</strong></h5>
                            <div class="item">
                                <label for="from">Data 1</label>
                                <input type="text" id="from" name="dateFrom">
                            </div>
                            <div class="item">
                                <label for="to">Data 2</label>
                                <input type="text" id="to" name="dateTo">
                            </div>
                            <input type='submit' value='Ricerca' />
                        </form>
                    </div>
                </div>
                <div class="item">
                    <h4 class="alert alert-info">Totale di tutti gli ordini registrati sul impianto</h4>
                    <table class="table-responsive">
                        @Html.Partial("_TotalPartial")
                    </table>
                </div>
            </div>
        </div>
    }
    <div class="container">
        <div class="row">
            <div class="item">
                @(Html.EJ().Grid<Carico>("FlatGrid")
                    .Locale("it-IT")
                    .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.dataSource)
                    .UpdateURL("update")
                    .InsertURL("insert")
                    .RemoveURL("remove")
                    .Adaptor(AdaptorType.RemoteSaveAdaptor))
                    .AllowGrouping()
                    .AllowPaging()
                    .EnableAltRow()
                    .PageSettings(p => p.PageCount(2).PageSize(5))
                    .IsResponsive(true)
                    .EnableResponsiveRow(true)
                    .AllowSorting()
                    .AllowFiltering()
                                    .FilterSettings(filter =>
                                    {
                                        filter.FilterType(FilterType.Excel);
                                    })

                    .AllowMultiSorting()
                    .ClientSideEvents(eve => eve.ActionComplete("ActionComplete"))
                    .MinWidth(400)
                    .EditSettings(d => d.AllowAdding(true).AllowDeleting(true).AllowEditing(true).EditMode(EditMode.Dialog))
                    .ToolbarSettings(toolbar =>
                    {
                        toolbar.ShowToolbar().ToolbarItems(items =>
                        {
                            items.AddTool(ToolBarItems.Add);
                            items.AddTool(ToolBarItems.Edit);
                            items.AddTool(ToolBarItems.Delete);
                            items.AddTool(ToolBarItems.Update);
                            items.AddTool(ToolBarItems.Cancel);
                            items.AddTool(ToolBarItems.Search);
                            items.AddTool(ToolBarItems.ExcelExport);
                            items.AddTool(ToolBarItems.WordExport);
                            items.AddTool(ToolBarItems.PdfExport);
                        });
                    })

                    .Mappers(map => map.ExportToExcelAction("caricoexcell")
                                    .ExportToPdfAction("caricopdf")
                                    .ExportToWordAction("caricoword"))
                    .Columns(col =>
                    {
                        col.Field(p => p.Id).HeaderText("ID Ordine").IsPrimaryKey(true).Visible(false).Add();

                        col.Field(p => p.pvID).HeaderText("PV").ForeignKeyField("pvID").ForeignKeyValue("pvName")
                        .DataSource((IEnumerable<object>)ViewBag.datasource3).TextAlign(TextAlign.Left).Width(75).AllowEditing(false).Add();

                        col.Field(p => p.yearId).HeaderText("Anno").ForeignKeyField("yearId").ForeignKeyValue("Anno")
                        .DataSource((IEnumerable<object>)ViewBag.datasource2).TextAlign(TextAlign.Left).Width(75).Format("{0:yyyy}").AllowEditing(false).Add();

                        col.Field(p => p.Ordine).HeaderText("Ordine").Width("50").Add();
                        col.Field(p => p.cData).HeaderText("Scarico").Format("{0:MM/dd/yyyy}").Width("45").EditType(EditingType.Datepicker).Add();

                        col.Field(p => p.DocumentoID).HeaderText("Tipo").ForeignKeyField("DocumentoID").ForeignKeyValue("Tipo")
                        .DataSource((IEnumerable<object>)ViewBag.datasource4).TextAlign(TextAlign.Left).Width(75).EditType(EditingType.Dropdown).Add();

                        col.Field(p => p.Numero).HeaderText("Documento").Width("65").Add();
                        col.Field(p => p.rData).HeaderText("Bolla").Format("{0:MM/dd/yyyy}").Width("45").EditType(EditingType.Datepicker).Add();

                        col.Field(p => p.depId).HeaderText("Emittente").ForeignKeyField("depId").ForeignKeyValue("Nome")
                        .DataSource((IEnumerable<object>)ViewBag.datasource5).TextAlign(TextAlign.Left).Width(75).EditType(EditingType.Dropdown).Add();

                        col.Field(p => p.Benzina).HeaderText("Benzina").Width("50").Add();
                        col.Field(p => p.Gasolio).HeaderText("Gasolio").Width("50").Add();
                        @*col.Field(p => p.HiQb).HeaderText("Gasolio").Width("50").Add();
                        col.Field(p => p.HiQd).HeaderText("Gasolio").Width("50").Add();*@
                        col.Field(p => p.Note).HeaderText("Note").Width("50").Add();
                    })
                )
            </div>
        </div>
    </div>
</section>
@section style{
    @Styles.Render("~/Content/EjWidgetCore")
    @Styles.Render("~/Content/EjTheme")
    @Styles.Render("~/Content/EjResponsive")
    <link href="@Url.Content("~/Contenuti/ej/web/responsive-css/ejgrid.responsive.min.css")" rel="stylesheet" />
}

@section script{

    @Scripts.Render("~/bundles/jqueryeasing")
    @Scripts.Render("~/bundles/jsrender")
    @Scripts.Render("~/bundles/jqueryglobalize")
    @Scripts.Render("~/bundles/jquerybrowser")
    @Scripts.Render("https://cdn.syncfusion.com/15.1.0.33/js/web/ej.web.all.min.js")
    @Scripts.Render("https://cdn.syncfusion.com/15.1.0.33/js/common/ej.unobtrusive.min.js")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/GridOption")
    @Html.EJ().ScriptManager()

    <script type="text/javascript">
        $(function () {
            $("#from").ejDatePicker({
                locale: "it-IT",
                onClose: function (selectedDate) {
                    $("#to").ejDatePicker("minDate", selectedDate);

                }
            });
            $("#to").ejDatePicker({
                locale: "it-IT",
                onClose: function (selectedDate) {
                    $("#from").ejDatePicker("maxDate", selectedDate);

                },
            });
        });

        ej.Grid.Locale["it-IT"] = {
            EmptyRecord: "Non esistono dati da visualizzare. Inseriscine uno.",

            //Editing option localization strings

            DeleteOperationAlert: "Nessun record selezionato per l'operazione di eliminazione",

            EditOperationAlert: "Nessun record selezionato per l'operazione di modifica",

            SaveButton: "Salva",

            OkButton: "OK",

            CancelButton: "Annulla",

            EditFormTitle: "Dettagli di ",

            AddFormTitle: "Aggiungi nuovo record ",

            //Key Combination alert message

            Notactionkeyalert: "Questa combinazione di tasti non è disponibile",

            Keyconfigalerttext: "Questa combinazione di tasti è già stata assegnata ",

            //Group drop area and caption format

            GroupDropArea: "Trascina un'intestazione di colonna per raggrupparla",

            GroupCaptionFormat: ":  - 8  oggetto  oggetti ",

            //Bulk Editing Alert Messages

            BatchSaveConifrm: "Sei sicuro di voler salvare le modifiche?",

            BatchSaveLostChanges: "Le modifiche non salvate verranno perse. Sei sicuro di voler continuare?",

            //Pager bar message string 

            PagerInfo: "{0} di {1} pagine ({2} oggetti)",

            GroupCaptionFormat: "{{:field}}: {{:key}} - {{:count}} {{if count == 1}}Oggetto{{else}}Oggetti{{/if}}",

            UnGroup: "Clicca qui per separare",

            //Frozen Alert Messages

            FrozenColumnsViewAlert: "Le colonne congelate dovrebbero essere in area di griglia",

            FrozenColumnsScrollAlert: "Attiva allowScrolling durante l'utilizzo di colonne congelate",

            FrozenNotSupportedException: "Le colonne e le righe congelate non sono supportate per il raggruppamento, il modello di riga, il modello di dettaglio e la modifica batch",

            //Toolbar tooltip

            Add: "Inserisci",

            Edit: "Modifica",

            Delete: "Elimina",

            Update: "Aggiorna",

            Cancel: "Annulla",

            //Filter menu strings

            StringMenuOptions: [{ text: "Inizia con", value: "StartsWith" }, { text: "Finisce con", value: "EndsWith" }, { text: "Contiene", value: "Contains" }, { text: "Pari", value: "Equal" }, { text: "Diverso", value: "NotEqual" }],

            NumberMenuOptions: [{ text: "Minori di", value: "LessThan" }, { text: "Più grande di", value: "GreaterThan" }, { text: "Minore di o Uguali", value: "LessThanOrEqual" }, { text: "Più grande di o uguale", value: "GreaterThanOrEqual" }, { text: "Uguale", value: "Equal" }, { text: "Diverso", value: "NotEqual" }],

            PredicateAnd: "E",

            PredicateOr: "O",

            Filter: "Filtro",

            MatchCase: "Caso di corrispondenza",

            Clear: "Pulisci",

            PrintGrid: "Stampa",

            ExcelExport: "Esportazione in formato Excel",

            WordExport: "Esportazione in formato Word",

            PdfExport: "Esportazione in formato PDF",

            ResponsiveFilter: "Filtro",

            ResponsiveSorting: "Ordinare"
        };

        ej.Pager.Locale["it-IT"] = {
            pagerInfo: "{0} di {1} Pagine ({2} Oggetti)",
            firstPageTooltip: "Per la prima pagina",
            lastPageTooltip: "L'ultima pagina",
            nextPageTooltip: "Pagina successiva",
            previousPageTooltip: "Pagina precedente",
            nextPagerTooltip: "Alla prossima pagina",
            previousPagerTooltip: "Pagina precedente"
        };
    </script>
}


